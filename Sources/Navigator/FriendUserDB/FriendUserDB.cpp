// Il s'agit du fichier principal de stockage 

#include "FriendUserDB.h"


namespace Solipsis {
	FriendUserDB::FriendUserDB()
	{

	}
	FriendUserDB::~FriendUserDB()
	{

	}

	/*++
	* @method: FriendUserDB::addUserFriendList
	*
	* @description: method to add a list of friends (friends or followers) to a user 
	*				getting from a social network.
	*
	* @input: 
	*		uid  - string : the unique id (solipsis) of the user (should be generated by the World Server)
	*		snid  - enum : type of the social network (one of facebook, twitter or opensocial) 
	*		fULElt  - list : list of pairs (id, name) identifying a person in the social network of type snid 

	* @output: void
	*
	* @remarks: public method
	* In this version we consider that the map of SN list friends is only relative to the local user
	* So we use only the first level of friend list map (SNid, SnIdFriendList)
	* Should be extended in a next version to be able to store also the SN graph of a non local user
	*--*/
	void FriendUserDB::addUserFriendList(const string& uid, SNTypeEnum snid, FriendUserListElt fULElt)
	{
		// Add an entry for uid to the userDB if it does not exist
		mLocalFriendUserListMap[snid] = fULElt;
	}

	
	/*++
	* @method: FriendUserDB::getUserFriendList
	*
	* @description: method to get the list of friends (friends or followers) of a user 
	*				relative to a social network.
	*
	* @input: 
	*		uid  - string : the unique id (solipsis) of the user  
	*		snid  - enum : type of the social network (one of facebook, twitter or opensocial) 
	* @output: 
	*	FriendUserListElt  - list : list of pairs (id, name) identifying the uid user's friends in 
	*						the social network of type snid
	*
	* @remarks: public method
	* In this version, uid is not used (supposed stored data always for the local user)
	*
	*--*/
	FriendUserListElt FriendUserDB::getUserFriendList(const string& uid, SNTypeEnum snid)
	{
		FriendUserListElt fulelt;

		if ((snid >= SNFacebook) && (snid < SNOther))
			fulelt = mLocalFriendUserListMap[snid];
		return fulelt;
	}

	/*++
	* @method: FriendUserDB::matchFriend
	*
	* @description: method to check if a visitor is a friend of the local user 
	*				relative to the local user social networks.
	*
	* @input: 
	*		snid		- SNTypeEnum : the unique id of the target Social Network  
	*		lId			- string : the unique local id (solipsis) of the local user  
	*		vUid		- string : the uid of the visitor in the target snid Social Network
	* @output: 
	*		bool - true if the visitor is a friend in one of the SN of the local user 
	*			 - false if not the case 
	*
	* @remarks: public method
	* 	In this version :
	*		- lId is not used (supposed stored data always for the local user)
	*--*/
	bool FriendUserDB::matchFriend(const SNTypeEnum snid, const string& lId, const string& vUid)
	{
		// Check if guest is local user = same uid
		if (vUid.compare(lId) == 0)
				return true;
	
		bool found = false;
	
		// Get the friendUser list in the snid social network
		// FriendUserListElt fulelt = (mfriendUserDBMap[lId])[snid];
		// For the default local user
		FriendUserListElt fulelt = mLocalFriendUserListMap[snid];

		// Iterate through the list to check presence of the vId
		for (FriendUserListElt::iterator pairId_ptr = fulelt.begin(); pairId_ptr != fulelt.end(); ++pairId_ptr){
			// Get vId equivalent for snid and check if present in current pair elt
			String_Pair pId(*pairId_ptr);
			string vid = pId.second;
			if (vUid.compare(vid) == 0)
				return (true);
		}
		return found;
	}

	// namespace Solipsis

}